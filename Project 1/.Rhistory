install.packages("tidyverse")
install.packages("dplyr")
install.packages("stringr")
install.packages("dplyr")
install.packages("ggthemes")
install.packages("ggplot2")
install.packages("countrycode")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggmap")
install.packages("cowplot")
install.packages("rlang")
library(ggplot2)
library(dplyr)
library(stringr)
library(ggthemes)
library(gridExtra)
library(maps)
library(countrycode)
library(ggmap)
library(cowplot)
library(rlang)
custom_theme <- function() {
theme_minimal() +
theme(
text = element_text(color = "#333333"),
plot.title = element_text(color = "#1F497D", size = 18, face = "bold"),
axis.title = element_text(size = 14, color = "#333333"),
axis.text = element_text(size = 12, color = "#333333"),
axis.line = element_line(color = "#333333"),
legend.title = element_text(size = 12, color = "#333333"),
legend.text = element_text(size = 10, color = "#333333"),
panel.background = element_rect(fill = "#F2F2F2"),
panel.grid.major = element_line(color = "#D9D9D9"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#F2F2F2"),
legend.background = element_rect(fill = "#FFFFFF", color = "#D9D9D9"),
legend.key = element_rect(fill = "transparent")
)
}
# Apply custom theme to all plots
graph_theme <- custom_theme()
setwd("/Users/nathanielong/Documents/Masters/CITS4009")
#1. Read in youtube data
youtube_data <- read.csv("dataset.csv")
youtube_data <- youtube_data %>%
mutate_if(is.character, tolower)
#2. fix formatting of column names
youtube_data <- youtube_data %>%
rename(
gross_tertiary_education_enrollment = Gross.tertiary.education.enrollment....,
unemployment_rate = Unemployment.rate,
video_views = video.views
)
#3. Rename all other columns to lowercase
colnames(youtube_data) <- tolower(colnames(youtube_data))
str(youtube_data)
summary(youtube_data)
head(youtube_data)
#4. Replace "NaN" (case-insensitive) with blanks
youtube_data <- youtube_data %>%
mutate_all(~ ifelse(tolower(.) == "nan", "", .)) %>%
mutate_all(str_squish) %>%
mutate_all(~ ifelse(str_trim(.) == "", NA, .))
#5. Convert type back to original
# Convert relevant columns to numeric/integer types
numeric_columns <- c(
"video_views",
"country_rank", "channel_type_rank",
"video_views_for_the_last_30_days", "lowest_monthly_earnings",
"highest_monthly_earnings", "lowest_yearly_earnings",
"highest_yearly_earnings", "subscribers_for_last_30_days",
"created_year", "population", "gross_tertiary_education_enrollment",
"unemployment_rate", "urban_population", "latitude", "longitude"
)
youtube_data <- youtube_data %>%
mutate(across(all_of(numeric_columns), ~ as.numeric(gsub(",", "", .)))) %>%
mutate(created_year = as.integer(created_year)) %>%
mutate(rank = as.integer(rank)) %>%
mutate(subscribers = as.integer(subscribers)) %>%
mutate(uploads = as.integer(uploads)) %>%
mutate(video_views_rank = as.integer(video_views_rank))
#6. Calculate country_percentile_rank
youtube_data <- youtube_data %>%
group_by(country) %>%
mutate(
country_total_ranks = n(),
country_percentile_rank = (rank(rank) - 1) / (country_total_ranks - 1)
) %>%
ungroup() %>%
mutate(country_percentile_rank = case_when(
country_percentile_rank <= 0.2 ~ "1-20%",
country_percentile_rank <= 0.4 ~ "21-40%",
country_percentile_rank <= 0.6 ~ "41-60%",
country_percentile_rank <= 0.8 ~ "61-80%",
TRUE ~ "81-100%"
))
# Analyze missing values
apply(is.na(youtube_data), 2, sum)
# Replace NA values with a new category
youtube_data$channel_type[is.na(youtube_data$channel_type)] <- "others"
youtube_data$country[is.na(youtube_data$country)] <- "others"
install.packages("rlang")
youtube_data$category[is.na(youtube_data$category)] <- "others"
install.packages("cowplot")
youtube_data$abbreviation[is.na(youtube_data$abbreviation)] <- "others"
# Replace NA values with 0
youtube_data$subscribers_for_last_30_days[is.na(youtube_data$subscribers_for_last_30_days)] <- 0
youtube_data$video_views_for_the_last_30_days[is.na(youtube_data$video_views_for_the_last_30_days)] <- 0
p1_subscribers <- ggplot(data = youtube_data, mapping = aes(x = subscribers)) +
geom_histogram(aes(y = ..density..), bins = 50, fill = "grey") +
geom_density(color = 'darkred') +
scale_x_continuous(trans = 'log10') +
ggtitle("Subscribers (Log Scale)") +
graph_theme
p2_subscribers <- ggplot(data = youtube_data, mapping = aes(x = subscribers)) +
geom_histogram(aes(y = ..density..), bins = 100, fill = "grey") +
geom_density(color = 'darkred') +
scale_x_continuous(limits = c(0, 2.45e+08), breaks = seq(0, 3e+08, by = 5e+07)) +
ggtitle("Subscribers (Up to 300 Million)") +
annotate("text", x = 1e+08, y = 5.0e-08, label = "Majority of top youtubers fall just under 50M,\n of which most are around 25M") +
graph_theme
grid.arrange(p1_subscribers, p2_subscribers, ncol = 1)
# Analyzing Video Views
p1_video_views <- ggplot(data = youtube_data, mapping = aes(x = video_views)) +
geom_histogram(aes(y = ..density..), bins = 50, fill = "grey") +
geom_density(color = 'darkred') +
scale_x_continuous(trans = 'log10') +
ggtitle("Video Views (Log Scale)") +
graph_theme
p2_video_views <- ggplot(data = youtube_data, mapping = aes(x = video_views)) +
geom_histogram(aes(y = ..density..), bins = 100, fill = "grey") +
geom_density(color = 'darkred') +
scale_x_continuous(limits = c(0, 2.280e+11)) +
ggtitle("Video Views (Up to 228 Billion)") +
graph_theme
grid.arrange(p1_video_views, p2_video_views, ncol = 1)
correlation_plot <- ggplot(data = youtube_data, aes(x = subscribers, y = video_views)) +
geom_point(alpha = 0.6, color = 'darkblue') +
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Adding the trendline
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
ggtitle("Correlation between Subscribers and Video Views (Log Scale)") +
xlab("Subscribers") + ylab("Video Views") +
graph_theme
grid.arrange(correlation_plot, ncol = 1)
highest_data <- youtube_data %>%
group_by(country) %>%
summarize(population = max(population, na.rm = TRUE),
urban_population = max(urban_population, na.rm = TRUE),
longitude = max(longitude, na.rm = TRUE),
latitude = max(latitude, na.rm = TRUE)) %>%
ungroup() %>%
left_join(select(youtube_data, country, abbreviation), by = "country") %>%
distinct(country, population, urban_population, longitude, latitude, abbreviation)
# Use the countrycode library to add the actual country code
highest_data <- highest_data %>%
mutate(country_code = countrycode(country, origin = "country.name", destination = "iso3c"))
highest_data <- highest_data %>%
arrange(population) %>%
mutate(country = factor(country, levels = country))  # Reorder the factor levels
population_bar_plot <- ggplot(highest_data, aes(x = country, y = population)) +
geom_bar(stat = "identity", fill = "darkred") +
coord_flip() +
labs(title = "Total Population in Each Country",
x = "Country",
y = "Population") +
graph_theme
grid.arrange(population_bar_plot, ncol = 1)
urban_population_bar_plot <- ggplot(highest_data, aes(x = country, y = urban_population)) +
geom_bar(stat = "identity", fill = "darkred") +
coord_flip() +
labs(title = "Total Urban Population in Each Country",
x = "Country",
y = "Urban Population") +
graph_theme
grid.arrange(urban_population_bar_plot, ncol = 1)
combined_bar_plot <- ggplot(highest_data, aes(x = country)) +
geom_bar(aes(y = population, fill = "Total Population"), stat = "identity", position = "stack") +
geom_bar(aes(y = urban_population, fill = "Urban Population"), stat = "identity", position = "stack") +
coord_flip() +
labs(title = "Population Analysis by Country",
x = "Country",
y = "Population") +
scale_fill_manual(values = c("Total Population" = "darkred", "Urban Population" = "darkblue")) +
graph_theme
grid.arrange(combined_bar_plot, ncol = 1)
# Create population map
world_map_data <- map_data("world")
# Create the population map plot with world map background
population_map_plot <- ggplot() +
geom_map(data = world_map_data, map = world_map_data,
aes(x = long, y = lat, map_id = region), color = "black", fill = "white") +
geom_point(data = highest_data, aes(x = longitude, y = latitude, size = population, fill = population),
shape = 21, color = "black", alpha = 0.7, show.legend = TRUE) +  # Set alpha to adjust transparency
scale_fill_gradient(low = "lightcoral", high = "darkred", na.value = "transparent", guide = "colorbar") +
scale_size_continuous(range = c(5, 30), guide = FALSE) +  # Remove size legend
labs(title = "Population Distribution Map",
x = "Longitude",
y = "Latitude",
fill = "Population") +
graph_theme +
theme(plot.title = element_text(color = "darkred", size = 30, face = "bold")) +
theme(axis.title = element_text(color = "#202020", size = 26)) +
theme(legend.position = "bottom")  # Move the legend to the bottom
grid.arrange(population_map_plot, ncol = 1)
youtube_data <- youtube_data %>%
group_by(country) %>%
mutate(
country_total_ranks = n(),
country_percentile_rank = (rank(rank) - 1) / (country_total_ranks - 1)
) %>%
ungroup() %>%
mutate(country_percentile_rank = case_when(
country_percentile_rank <= 0.2 ~ "1-20%",
country_percentile_rank <= 0.4 ~ "21-40%",
country_percentile_rank <= 0.6 ~ "41-60%",
country_percentile_rank <= 0.8 ~ "61-80%",
TRUE ~ "81-100%"
))
library(ggplot2)
library(dplyr)
library(stringr)
library(ggthemes)
library(gridExtra)
library(maps)
library(countrycode)
library(ggmap)
library(cowplot)
library(rlang)
custom_theme <- function() {
theme_minimal() +
theme(
text = element_text(color = "#333333"),
plot.title = element_text(color = "#1F497D", size = 18, face = "bold"),
axis.title = element_text(size = 14, color = "#333333"),
axis.text = element_text(size = 12, color = "#333333"),
axis.line = element_line(color = "#333333"),
legend.title = element_text(size = 12, color = "#333333"),
legend.text = element_text(size = 10, color = "#333333"),
panel.background = element_rect(fill = "#F2F2F2"),
panel.grid.major = element_line(color = "#D9D9D9"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#F2F2F2"),
legend.background = element_rect(fill = "#FFFFFF", color = "#D9D9D9"),
legend.key = element_rect(fill = "transparent")
)
}
# Apply custom theme to all plots
graph_theme <- custom_theme()
library(ggplot2)
library(dplyr)
library(stringr)
library(ggthemes)
library(gridExtra)
library(maps)
library(countrycode)
library(ggmap)
library(cowplot)
library(rlang)
custom_theme <- function() {
theme_minimal() +
theme(
text = element_text(color = "#333333"),
plot.title = element_text(color = "#1F497D", size = 18, face = "bold"),
axis.title = element_text(size = 14, color = "#333333"),
axis.text = element_text(size = 12, color = "#333333"),
axis.line = element_line(color = "#333333"),
legend.title = element_text(size = 12, color = "#333333"),
legend.text = element_text(size = 10, color = "#333333"),
panel.background = element_rect(fill = "#F2F2F2"),
panel.grid.major = element_line(color = "#D9D9D9"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#F2F2F2"),
legend.background = element_rect(fill = "#FFFFFF", color = "#D9D9D9"),
legend.key = element_rect(fill = "transparent")
)
}
# Apply custom theme to all plots
graph_theme <- custom_theme()
setwd("/Users/nathanielong/Documents/Masters/CITS4009")
#1. Read in youtube data
youtube_data <- read.csv("dataset.csv")
youtube_data <- youtube_data %>%
mutate_if(is.character, tolower)
#2. fix formatting of column names
youtube_data <- youtube_data %>%
rename(
gross_tertiary_education_enrollment = Gross.tertiary.education.enrollment....,
unemployment_rate = Unemployment.rate,
video_views = video.views
)
#3. Rename all other columns to lowercase
colnames(youtube_data) <- tolower(colnames(youtube_data))
str(youtube_data)
summary(youtube_data)
head(youtube_data)
#4. Replace "NaN" (case-insensitive) with blanks
youtube_data <- youtube_data %>%
mutate_all(~ ifelse(tolower(.) == "nan", "", .)) %>%
mutate_all(str_squish) %>%
mutate_all(~ ifelse(str_trim(.) == "", NA, .))
#5. Convert type back to original
# Convert relevant columns to numeric/integer types
numeric_columns <- c(
"video_views",
"country_rank", "channel_type_rank",
"video_views_for_the_last_30_days", "lowest_monthly_earnings",
"highest_monthly_earnings", "lowest_yearly_earnings",
"highest_yearly_earnings", "subscribers_for_last_30_days",
"created_year", "population", "gross_tertiary_education_enrollment",
"unemployment_rate", "urban_population", "latitude", "longitude"
)
youtube_data <- youtube_data %>%
mutate(across(all_of(numeric_columns), ~ as.numeric(gsub(",", "", .)))) %>%
mutate(created_year = as.integer(created_year)) %>%
mutate(rank = as.integer(rank)) %>%
mutate(subscribers = as.integer(subscribers)) %>%
mutate(uploads = as.integer(uploads)) %>%
mutate(video_views_rank = as.integer(video_views_rank))
#6. Calculate country_percentile_rank
youtube_data <- youtube_data %>%
group_by(country) %>%
mutate(
country_total_ranks = n(),
country_percentile_rank = (rank(rank) - 1) / (country_total_ranks - 1)
) %>%
ungroup() %>%
mutate(country_percentile_rank = case_when(
country_percentile_rank <= 0.2 ~ "1-20%",
country_percentile_rank <= 0.4 ~ "21-40%",
country_percentile_rank <= 0.6 ~ "41-60%",
country_percentile_rank <= 0.8 ~ "61-80%",
TRUE ~ "81-100%"
))
# Analyze missing values
apply(is.na(youtube_data), 2, sum)
# Replace NA values with a new category
youtube_data$channel_type[is.na(youtube_data$channel_type)] <- "others"
youtube_data$country[is.na(youtube_data$country)] <- "others"
youtube_data$category[is.na(youtube_data$category)] <- "others"
youtube_data$abbreviation[is.na(youtube_data$abbreviation)] <- "others"
# Replace NA values with 0
youtube_data$subscribers_for_last_30_days[is.na(youtube_data$subscribers_for_last_30_days)] <- 0
youtube_data$video_views_for_the_last_30_days[is.na(youtube_data$video_views_for_the_last_30_days)] <- 0
p1_subscribers <- ggplot(data = youtube_data, mapping = aes(x = subscribers)) +
geom_histogram(aes(y = ..density..), bins = 50, fill = "grey") +
geom_density(color = 'darkred') +
scale_x_continuous(trans = 'log10') +
ggtitle("Subscribers (Log Scale)") +
graph_theme
p2_subscribers <- ggplot(data = youtube_data, mapping = aes(x = subscribers)) +
geom_histogram(aes(y = ..density..), bins = 100, fill = "grey") +
geom_density(color = 'darkred') +
scale_x_continuous(limits = c(0, 2.45e+08), breaks = seq(0, 3e+08, by = 5e+07)) +
ggtitle("Subscribers (Up to 300 Million)") +
annotate("text", x = 1e+08, y = 5.0e-08, label = "Majority of top youtubers fall just under 50M,\n of which most are around 25M") +
graph_theme
grid.arrange(p1_subscribers, p2_subscribers, ncol = 1)
# Analyzing Video Views
p1_video_views <- ggplot(data = youtube_data, mapping = aes(x = video_views)) +
geom_histogram(aes(y = ..density..), bins = 50, fill = "grey") +
geom_density(color = 'darkred') +
scale_x_continuous(trans = 'log10') +
ggtitle("Video Views (Log Scale)") +
graph_theme
p2_video_views <- ggplot(data = youtube_data, mapping = aes(x = video_views)) +
geom_histogram(aes(y = ..density..), bins = 100, fill = "grey") +
geom_density(color = 'darkred') +
scale_x_continuous(limits = c(0, 2.280e+11)) +
ggtitle("Video Views (Up to 228 Billion)") +
graph_theme
grid.arrange(p1_video_views, p2_video_views, ncol = 1)
correlation_plot <- ggplot(data = youtube_data, aes(x = subscribers, y = video_views)) +
geom_point(alpha = 0.6, color = 'darkblue') +
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Adding the trendline
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
ggtitle("Correlation between Subscribers and Video Views (Log Scale)") +
xlab("Subscribers") + ylab("Video Views") +
graph_theme
grid.arrange(correlation_plot, ncol = 1)
highest_data <- youtube_data %>%
group_by(country) %>%
summarize(population = max(population, na.rm = TRUE),
urban_population = max(urban_population, na.rm = TRUE),
longitude = max(longitude, na.rm = TRUE),
latitude = max(latitude, na.rm = TRUE)) %>%
ungroup() %>%
left_join(select(youtube_data, country, abbreviation), by = "country") %>%
distinct(country, population, urban_population, longitude, latitude, abbreviation)
# Use the countrycode library to add the actual country code
highest_data <- highest_data %>%
mutate(country_code = countrycode(country, origin = "country.name", destination = "iso3c"))
highest_data <- highest_data %>%
arrange(population) %>%
mutate(country = factor(country, levels = country))  # Reorder the factor levels
population_bar_plot <- ggplot(highest_data, aes(x = country, y = population)) +
geom_bar(stat = "identity", fill = "darkred") +
coord_flip() +
labs(title = "Total Population in Each Country",
x = "Country",
y = "Population") +
graph_theme
grid.arrange(population_bar_plot, ncol = 1)
urban_population_bar_plot <- ggplot(highest_data, aes(x = country, y = urban_population)) +
geom_bar(stat = "identity", fill = "darkred") +
coord_flip() +
labs(title = "Total Urban Population in Each Country",
x = "Country",
y = "Urban Population") +
graph_theme
grid.arrange(urban_population_bar_plot, ncol = 1)
combined_bar_plot <- ggplot(highest_data, aes(x = country)) +
geom_bar(aes(y = population, fill = "Total Population"), stat = "identity", position = "stack") +
geom_bar(aes(y = urban_population, fill = "Urban Population"), stat = "identity", position = "stack") +
coord_flip() +
labs(title = "Population Analysis by Country",
x = "Country",
y = "Population") +
scale_fill_manual(values = c("Total Population" = "darkred", "Urban Population" = "darkblue")) +
graph_theme
grid.arrange(combined_bar_plot, ncol = 1)
# Create population map
world_map_data <- map_data("world")
# Create the population map plot with world map background
population_map_plot <- ggplot() +
geom_map(data = world_map_data, map = world_map_data,
aes(x = long, y = lat, map_id = region), color = "black", fill = "white") +
geom_point(data = highest_data, aes(x = longitude, y = latitude, size = population, fill = population),
shape = 21, color = "black", alpha = 0.7, show.legend = TRUE) +  # Set alpha to adjust transparency
scale_fill_gradient(low = "lightcoral", high = "darkred", na.value = "transparent", guide = "colorbar") +
scale_size_continuous(range = c(5, 30), guide = FALSE) +  # Remove size legend
labs(title = "Population Distribution Map",
x = "Longitude",
y = "Latitude",
fill = "Population") +
graph_theme +
theme(plot.title = element_text(color = "darkred", size = 30, face = "bold")) +
theme(axis.title = element_text(color = "#202020", size = 26)) +
theme(legend.position = "bottom")  # Move the legend to the bottom
grid.arrange(population_map_plot, ncol = 1)
youtube_data <- youtube_data %>%
group_by(country) %>%
mutate(
country_total_ranks = n(),
country_percentile_rank = (rank(rank) - 1) / (country_total_ranks - 1)
) %>%
ungroup() %>%
mutate(country_percentile_rank = case_when(
country_percentile_rank <= 0.2 ~ "1-20%",
country_percentile_rank <= 0.4 ~ "21-40%",
country_percentile_rank <= 0.6 ~ "41-60%",
country_percentile_rank <= 0.8 ~ "61-80%",
TRUE ~ "81-100%"
))
ggplot(youtube_data, aes(x = country_percentile_rank, y = uploads)) +
geom_point(colour = "darkred", shape = 23) +
geom_smooth() +
labs(
title = "Uploads vs Rank",
x = "Global Percentile Rank",
y = "Number of Uploads"
) +
graph_theme
library(shiny); runApp('Project 1 Shiny.R')
library(cowplot)
runApp('Project 1 Shiny.R')
runApp('Project 1 Shiny.R')
